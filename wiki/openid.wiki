#labels openid,relyingparty,consumer
openid relying party howto

For a working example, see [SampleOpenIdServlet].
To enable openid sreg extension, see [OpenIdSimpleRegistration].

= Configuration =

====maven2====
{{{
    <dependency>
      <groupId>com.dyuproject</groupId>
      <artifactId>dyuproject-openid</artifactId>
      <version>1.0.6</version>
    </dependency>
}}}

{{{

  <repositories>
    <repository>
      <releases>
        <enabled>true</enabled>
      </releases>
      <id>dyuproject-repo</id>
      <name>dyuproject-repo</name>      
      <url>http://dyuproject.googlecode.com/svn/repos/maven2</url>
    </repository>
  </repositories>

}}}


====openid.properties====
This will be used by {{{RelyingParty.getInstance();}}}

If you're using maven2, you could put this in src/main/resources.

{{{
#required

openid.cookie.name=your_app_name
openid.cookie.security.secretKey=your_secret_key

#optional

openid.cookie.path=/

#openid.parameter=some_parameter
#default value is "openid_identifier"



#openid.cookie.domain=http://www.example.com

#openid.coookie.security.type=md5Signed
#default type is "encrypted"

#openid.coodie.maxAge=600
#maxAge in seconds, default to 600(10 mins)
}}}

If you want custom configuration, you could do:
{{{
Properties props = new Properties();
// set your custom properties...
RelyingParty relyingParty = RelyingParty.newInstance(props);
}}}


= Usage =
{{{
RelyingParty _relyingParty = RelyingParty.getInstance();
}}}

{{{
OpenIdUser user = _relyingParty.discover(request);
}}}

{{{
if(_relyingParty.associate(user, request, response))
{
    // authenticate user to his/her openid provider
    StringBuffer url = request.getRequestURL();
    String trustRoot = url.substring(0, url.indexOf("/", 9));
    String realm = url.substring(0, url.lastIndexOf("/"));
    String returnTo = url.toString();
    response.sendRedirect(RelyingParty.getAuthUrlString(user, trustRoot, realm, 
        returnTo)); 
}
}}}

{{{
if(user.isAssociated() && RelyingParty.isAuthResponse(request))
{
    // verify authentication
    if(_relyingParty.verifyAuth(user, request, response))
    {
        // authenticated
        response.sendRedirect("/home/");
    }
}
}}}