#labels openid,relyingparty,consumer,configurate,usage,setup
openid relying party howto

See the [QuickStartOpenid Quick Start Guide], [OpenIdServletFilter] and [SampleOpenIdServlet].

To enable openid sreg extension, see [OpenIdSimpleRegistration].

= configuration for dyuproject-1.1.1 and above =

===_openid.properties_===
This will be used by {{{RelyingParty.getInstance();}}} if its available in the classpath.

If you're using maven2, you could put this in src/main/resources.
{{{
#defaults (No extra configuration)
#openid.identifier.parameter = openid_identifier
#openid.discovery = com.dyuproject.openid.DefaultDiscovery
#openid.assocation = com.dyuproject.openid.DiffieHellmanAssociation
#openid.httpconnector = com.dyuproject.openid.SimpleHttpConnector
#openid.user.manager = com.dyuproject.openid.manager.HttpSessionUserManager
}}}
{{{
#optional (comma-or-semicolon-separated values)
#openid.relyingparty.listeners = com.dyuproject.openid.ext.SRegConfigListener
#openid.identifier.resolvers = com.dyuproject.openid.ext.EmailResolver
}}}
{{{
#if this is used:
#openid.user.manager = com.dyuproject.openid.manager.CookieBasedUserManager
}}}
{{{
#then these are required:
#openid.user.manager.cookie.name = openidservlet1
#openid.user.manager.cookie.security.secret_key = secret
}}}
{{{
#and these are optional:
#openid.user.manager.cookie.path = /
#openid.user.manager.cookie.domain = http://www.example.com
#openid.user.manager.cookie.security_type = md5Signed (default: encrypted)
#openid.user.manager.cookie.max_age = 900 (default: 600 seconds) 
#openid.user.manager.cookie.login_timeout = 90 (default: 60 seconds)
This could be done programmatically as well:
}}}

{{{
Properties props = new Properties();
// set your custom properties...
RelyingParty relyingParty = RelyingParty.newInstance(props);
}}}

===_usage_===
The best way to use the api is through providing a custom *{{{RelyingParty.Listener}}}*
and using the [OpenIdServletFilter] (can be easily subclassed if needed)

{{{
    RelyingParty _relyingParty = RelyingParty.getInstance();
    
    public void init()
    {
        // enable sreg
        _relyingParty.addListener(new SRegConfigListener());
        // custom listener
        _relyingParty.addListener(new RelyingParty.Listener()
        {
            public void onDiscovery(OpenIdUser user, HttpServletRequest request)
            {
                System.err.println("discovered user: " + user.getClaimedId());
            }            
            public void onPreAuthenticate(OpenIdUser user, HttpServletRequest request,
                    UrlEncodedParameterMap params)
            {
                System.err.println("pre-authenticate user: " + user.getClaimedId());
            }            
            public void onAuthenticate(OpenIdUser user, HttpServletRequest request)
            {

                System.err.print("newly authenticated user: " + user.getIdentity());
                SReg sreg = SReg.getSreg(user);
                if(sreg!=null)
                    System.err.print(" aka " + sreg.getNickname());
                System.err.print("\n");            
            }            
            public void onAccess(OpenIdUser user, HttpServletRequest request)
            {        
                System.err.print("user access: " + user.getIdentity());
                SReg sreg = SReg.getSreg(user);
                if(sreg!=null)
                    System.err.print(" aka " + sreg.getNickname());
                System.err.print("\n");
            }            
        });
    }

}}}

----

=configuration for dyuproject-1.0.x=

===_openid.properties_===
{{{
#required

openid.cookie.name=your_app_name
openid.cookie.security.secretKey=your_secret_key

#optional

openid.cookie.path=/

#openid.parameter=some_parameter
#default value is "openid_identifier"



#openid.cookie.domain=http://www.example.com

#openid.coookie.security.type=md5Signed
#default type is "encrypted"

#openid.coodie.maxAge=600
#maxAge in seconds, default to 600(10 mins)
}}}


===_usage_===
{{{
RelyingParty _relyingParty = RelyingParty.getInstance();
}}}

{{{
OpenIdUser user = _relyingParty.discover(request);
}}}

{{{
if(_relyingParty.associate(user, request, response))
{
    // authenticate user to his/her openid provider
    StringBuffer url = request.getRequestURL();
    String trustRoot = url.substring(0, url.indexOf("/", 9));
    String realm = url.substring(0, url.lastIndexOf("/"));
    String returnTo = url.toString();
    response.sendRedirect(RelyingParty.getAuthUrlString(user, trustRoot, realm, 
        returnTo)); 
}
}}}

{{{
if(user.isAssociated() && RelyingParty.isAuthResponse(request))
{
    // verify authentication
    if(_relyingParty.verifyAuth(user, request, response))
    {
        // authenticated
        response.sendRedirect("/home/");
    }
}
}}}